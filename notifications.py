import asyncio
from aiogram import Bot
from typing import List, Dict, Optional
from database.models import db
from config import Config
import logging

logger = logging.getLogger(__name__)

class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def notify_admins(self, message: str, parse_mode: Optional[str] = None):
        """Send notification to all admins"""
        for admin_id in Config.ADMIN_IDS:
            try:
                await self.bot.send_message(
                    chat_id=admin_id,
                    text=message,
                    parse_mode=parse_mode
                )
            except Exception as e:
                logger.error(f"Failed to send notification to admin {admin_id}: {e}")
    
    async def notify_new_order(self, order_id: int):
        """Notify admins about new order"""
        async with db.get_connection() as conn:
            cursor = await conn.execute('''
                SELECT o.*, u.first_name, u.phone
                FROM orders o
                JOIN users u ON o.user_id = u.telegram_id
                WHERE o.id = ?
            ''', (order_id,))
            order = await cursor.fetchone()
        
        if order:
            message = f"""üÜï **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order[0]}**

üë§ –ö–ª–∏–µ–Ω—Ç: {order[12]} ({order[13]})
üí∞ –°—É–º–º–∞: {order[2]:,} —Å—É–º
üìç –ê–¥—Ä–µ—Å: {order[3]}
üí≥ –û–ø–ª–∞—Ç–∞: {order[6]}
üìÖ –í—Ä–µ–º—è: {order[9]}

–¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!"""
            
            await self.notify_admins(message, parse_mode='Markdown')
    
    async def notify_order_status_change(self, order_id: int, new_status: str, user_id: int):
        """Notify customer about order status change"""
        status_messages = {
            'confirmed': '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!',
            'preparing': 'üë®‚Äçüç≥ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è',
            'ready': 'üì¶ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
            'delivering': 'üöö –í–∞—à –∑–∞–∫–∞–∑ –≤ –ø—É—Ç–∏',
            'completed': '‚úÖ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!',
            'cancelled': '‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω'
        }
        
        message = status_messages.get(new_status, f'–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}')
        message = f"üìã **–ó–∞–∫–∞–∑ #{order_id}**\n\n{message}"
        
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Failed to notify user {user_id} about order status: {e}")
    
    async def notify_low_stock(self, product_id: int, current_stock: int):
        """Notify admins about low stock"""
        async with db.get_connection() as conn:
            cursor = await conn.execute(
                'SELECT name_ru FROM products WHERE id = ?',
                (product_id,)
            )
            product = await cursor.fetchone()
        
        if product:
            message = f"‚ö†Ô∏è **–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞**\n\nüì¶ {product[0]}\nüìä –û—Å—Ç–∞—Ç–æ–∫: {current_stock} —à—Ç."
            await self.notify_admins(message, parse_mode='Markdown')
    
    async def send_promotional_message(self, user_ids: List[int], message: str):
        """Send promotional message to users"""
        success_count = 0
        failed_count = 0
        
        for user_id in user_ids:
            try:
                await self.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='Markdown'
                )
                success_count += 1
                # Small delay to avoid rate limiting
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.error(f"Failed to send promo message to user {user_id}: {e}")
                failed_count += 1
        
        # Notify admins about campaign results
        result_message = f"""üì¢ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏**

‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}
‚ùå –û—à–∏–±–æ–∫: {failed_count}
üìä –í—Å–µ–≥–æ: {len(user_ids)}"""
        
        await self.notify_admins(result_message, parse_mode='Markdown')
    
    async def notify_referral_bonus(self, user_id: int, bonus_amount: int):
        """Notify user about referral bonus"""
        message = f"""üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**

–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {bonus_amount:,} —Å—É–º

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π! üéÅ"""
        
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Failed to notify user {user_id} about referral bonus: {e}")
    
    async def send_daily_stats(self):
        """Send daily statistics to admins"""
        async with db.get_connection() as conn:
            # Get today's statistics
            cursor = await conn.execute('''
                SELECT 
                    COUNT(*) as orders_count,
                    COALESCE(SUM(total_amount), 0) as revenue
                FROM orders 
                WHERE DATE(created_at) = DATE('now')
            ''')
            today_stats = await cursor.fetchone()
            
            cursor = await conn.execute('''
                SELECT COUNT(*) 
                FROM users 
                WHERE DATE(created_at) = DATE('now')
            ''')
            new_users = (await cursor.fetchone())[0]
        
        message = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è**

üìã –ó–∞–∫–∞–∑–æ–≤: {today_stats[0]}
üí∞ –í—ã—Ä—É—á–∫–∞: {today_stats[1]:,} —Å—É–º
üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users}

üìÖ {datetime.now().strftime('%d.%m.%Y')}"""
        
        await self.notify_admins(message, parse_mode='Markdown')

# Global notification service instance
notification_service = None

def init_notification_service(bot: Bot):
    """Initialize notification service"""
    global notification_service
    notification_service = NotificationService(bot)
    return notification_service